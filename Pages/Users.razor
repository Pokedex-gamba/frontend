@page "/Users"

@inherits Auth

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization
@using PokedexGambaApp.Shared

<PageTitle>Users</PageTitle>

<div class="container mt-5">
    <h3 class="text-center mb-4">Users</h3>
    <input type="text" class="form-control mb-3" placeholder="Search users..." @bind="SearchQuery" @bind:event="oninput"
        aria-label="Search users" />

    <div class="container">
        <div class="row">
            @if (FilteredUserList.Any())
            {
                <table class="table table-striped text-center">
                    <thead class="table-dark">
                        <tr>
                            <th>Username</th>
                            <th>Name</th>
                            <th>Surname</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in FilteredUserList)
                        {
        <tr class="navigateToUser" style="cursor: pointer;" @onclick="(() => NavigateToUser(user.Username))">
            <td>@user.Username</td>
            <td>@user.Name</td>
            <td>@user.Surname</td>
        </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-center text-muted">No users found.</p>
            }
        </div>
    </div>
</div>

<style>
    .navigateToUser:hover {
        background-color: #7293ff;
    }
</style>

@code {


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private List<UserInfo> UserList = new();
    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadUsersAsync();
    }

            private void NavigateToUser(string username)
    {
        NavigationManager.NavigateTo($"/User/{username}");
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "http://127.0.0.1:8085/findAllUserInfo");

            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "user-info-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            UserList = JsonSerializer.Deserialize<List<UserInfo>>(result) ?? new List<UserInfo>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private IEnumerable<UserInfo> FilteredUserList =>
    string.IsNullOrEmpty(SearchQuery)
    ? UserList
    : UserList
    .Where(u =>
    u.Username.Contains(SearchQuery) ||
    u.Name.Contains(SearchQuery) ||
    u.Surname.Contains(SearchQuery));

    private class UserInfo
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        [JsonPropertyName("username")]
        public string Username { get; set; } = string.Empty;

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("surname")]
        public string Surname { get; set; } = string.Empty;
    }
}
