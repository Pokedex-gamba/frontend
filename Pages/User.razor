@page "/User/{username}"

@inherits Auth

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using PokedexGambaApp.Shared
@using System.Text


<PageTitle>User @UserInfo?.Username</PageTitle>

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header text-white text-center"
            style="background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);">
            <h3>@UserInfo?.Username</h3>
        </div>

        @if (UserInfo == null)
        {
            <div class="text-center mt-3">
                <p>Sorry, user with this username does not exists...</p>
            </div>
        }
        else if ((UserInfo?.Surname != "") || (UserInfo?.Name != ""))
        {
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <strong>First Name</strong>
                        <p class="text-muted">@UserInfo?.Name</p>
                    </div>
                    <div class="col-md-6">
                        <strong>Last Name</strong>
                        <p class="text-muted">@UserInfo?.Surname</p>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

<div class="container mt-5">
    <h3 class="text-center mb-4">@UserInfo?.Username's inventory</h3>
    <div class="container">

        <div class="d-flex justify-content-center mb-4">
            <button class="btn btn-primary me-2" @onclick="() => SortPokemonList(SortType.ByRarity)">Sort by
                Rarity</button>
            <button class="btn btn-primary me-2" @onclick="() => SortPokemonList(SortType.ByName)">Sort by Name</button>
            <button class="btn btn-primary me-2" @onclick="() => SortPokemonList(SortType.ByHP)">Sort by HP</button>
            <button class="btn btn-primary me-2" @onclick="() => SortPokemonList(SortType.ByAttack)">Sort by
                Attack</button>
            <button class="btn btn-primary me-2" @onclick="() => SortPokemonList(SortType.ByDefense)">Sort by
                Defense</button>
            <button class="btn btn-primary" @onclick="() => SortPokemonList(SortType.BySpeed)">Sort by Speed</button>
        </div>


        <div class="row">

            @foreach (Pokemon pokemon in PokemonList)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 @(pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                        data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="
                        background:@(RarityColorFunctions.GetBackgroundGradient(pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity));
                                                " data-color="@(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity))">
                        <div class="wrapper">

                            <div class="wrapper-pokemon-img">
                                <img src="@pokemon.FrontDefault" class="card-img-top" />
                            </div>
                            <div class="card-body p-3">
                                <h5 class="card-title text-center">@pokemon.PokemonName</h5>

                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>HP:</strong> <span class="badge bg-success">@pokemon.BaseHP</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Attack:</strong> <span class="badge bg-danger">@pokemon.BaseAttack</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Defense:</strong> <span class="badge bg-warning">@pokemon.BaseDefense</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Speed:</strong> <span class="badge bg-info">@pokemon.BaseSpeed</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Type:</strong> <span class="text-uppercase text-muted">@pokemon.Type</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Legendary:</strong>
                                        <span class="text-primary">@(pokemon.Legendary ? "Yes" : "No")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-center align-items-center">
                                        <strong class="me-2">Rarity:</strong>
                                        <span class="badge rounded-pill bg-secondary">@pokemon.TotalRarity</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function initializeVanillaTilt() {
        console.log("Initializing VanillaTilt...");

        const tiltElements = document.querySelectorAll("[data-tilt]");

        if (tiltElements.length > 0) {
            VanillaTilt.init(tiltElements, {
                max: 18,
                scale: 1.08,
            });
            console.log(`VanillaTilt initialized on ${tiltElements.length} elements.`);
        } else {
            console.warn("No elements with data-tilt attribute found.");
        }

        document.querySelectorAll(".card").forEach(card => {
            const glareColor = card.getAttribute("data-color");
            const glareInner = card.querySelector(".js-tilt-glare-inner");

            if (glareInner && glareColor) {
                glareInner.style.background = glareColor;
            }
        });
    }
</script>


@code {
    [Parameter] public string Username { get; set; } // Získá hodnotu z URL
    private UserInfo? UserInfo;

    private List<Pokemon> PokemonList = new List<Pokemon>();

    private enum SortType
    {
        ByRarity,
        ByName,
        ByHP,
        ByAttack,
        ByDefense,
        BySpeed
    }
    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadUserInfoAsync();
        await LoadPokemonsAsync();
    }

    private async Task LoadUserInfoAsync()
    {
        try
        {
            var requestData = JsonContent.Create(new { Username });

            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, "/findUserInfoByUsername")
                {
                    Content = requestData
                };

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "user-info-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            UserInfo = JsonSerializer.Deserialize<UserInfo>(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user info: {ex.Message}");
        }
    }









    private void SortPokemonList(SortType sortType)
    {
        switch (sortType)
        {
            case SortType.ByRarity:
                PokemonList = PokemonList.OrderByDescending(p => p.TotalRarity).ToList();
                break;
            case SortType.ByName:
                PokemonList = PokemonList.OrderBy(p => p.PokemonName).ToList();
                break;
            case SortType.ByHP:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseHP).ToList();
                break;
            case SortType.ByAttack:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseAttack).ToList();
                break;
            case SortType.ByDefense:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseDefense).ToList();
                break;
            case SortType.BySpeed:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseSpeed).ToList();
                break;
        }
        StateHasChanged();
        InitializeVanillaTiltAsync();
    }

    private async Task InitializeVanillaTiltAsync()
    {
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeVanillaTilt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing VanillaTilt: {ex.Message}");
        }
    }

    private async Task LoadPokemonsAsync()
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, $"/pokemon/inventory/getUserInventory?userId={UserInfo?.Id}");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "inventory-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            PokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
            InitializeVanillaTiltAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
