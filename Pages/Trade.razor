@page "/Trade"

@inherits Auth

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using PokedexGambaApp.Shared
@using System.Text.Json.Serialization

<PageTitle>Trade</PageTitle>

<div class="container mt-5">
    @if (!IsPokemonSelected)
    {
        <h3 class="text-center mb-4">Choose your Pokémon to trade</h3>
        <div class="row">
            @foreach (Pokemon pokemon in PokemonList)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 @(pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                        data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="cursor: pointer;
                        background:@(RarityColorFunctions.GetBackgroundGradient(pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity));
                                                                            "
                        data-color="@(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity))"
                        @onclick="() => SelectPokemon(pokemon)">
                        <div class="wrapper">

                            <div class="wrapper-pokemon-img">
                                <img src="@pokemon.FrontDefault" class="card-img-top" />
                            </div>
                            <div class="card-body p-3">
                                <h5 class="card-title text-center">@pokemon.PokemonName</h5>

                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>HP:</strong> <span class="badge bg-success">@pokemon.BaseHP</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Attack:</strong> <span class="badge bg-danger">@pokemon.BaseAttack</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Defense:</strong> <span class="badge bg-warning">@pokemon.BaseDefense</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Speed:</strong> <span class="badge bg-info">@pokemon.BaseSpeed</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Type:</strong> <span class="text-uppercase text-muted">@pokemon.Type</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Legendary:</strong>
                                        <span class="text-primary">@(pokemon.Legendary ? "Yes" : "No")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-center align-items-center">
                                        <strong class="me-2">Rarity:</strong>
                                        <span class="badge rounded-pill bg-secondary">@pokemon.TotalRarity</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!IsUserSelected)
    {
        <div class="container">
            <h4 class="text-center mb-4">You selected: @SelectedPokemon.PokemonName</h4>

            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-3 mx-auto">
                <div class="card h-100 @(@SelectedPokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                    data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="cursor: pointer; 
               background:@(RarityColorFunctions.GetBackgroundGradient(@SelectedPokemon.TotalRarity)); 
               border: 2px solid @(RarityColorFunctions.GetRarityHSLA(@SelectedPokemon.TotalRarity)); 
               font-size: 0.85rem; 
               width: 90%; 
               max-width: 200px; 
               aspect-ratio: 3 / 4; 
               margin: auto; 
               display: flex; 
               flex-direction: column;">
                    <div class="wrapper"
                        style="flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">

                        <div class="wrapper-pokemon-img text-center"
                            style="height: 50%; display: flex; align-items: center; justify-content: center;">
                            <img src="@SelectedPokemon.FrontDefault" class="card-img-top"
                                style="max-width: 80%; max-height: 100%; object-fit: contain;" />
                        </div>
                        <div class="card-body p-2"
                            style="padding-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">
                            <h5 class="card-title text-center" style="font-size: 1rem; margin: 0;">
                                @SelectedPokemon.PokemonName</h5>

                            <ul class="list-group list-group-flush mt-2" style="padding: 0; margin: 0;">
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>HP:</strong> <span class="badge bg-success">@SelectedPokemon.BaseHP</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Attack:</strong> <span
                                        class="badge bg-danger">@SelectedPokemon.BaseAttack</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Defense:</strong> <span
                                        class="badge bg-warning">@SelectedPokemon.BaseDefense</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Speed:</strong> <span class="badge bg-info">@SelectedPokemon.BaseSpeed</span>
                                </li>
                                <li class="list-group-item p-1">
                                    <strong>Type:</strong> <span
                                        class="text-uppercase text-muted">@SelectedPokemon.Type</span>
                                </li>
                                <li class="list-group-item p-1">
                                    <strong>Legendary:</strong>
                                    <span class="text-primary">@(SelectedPokemon.Legendary ? "Yes" : "No")</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-center align-items-center p-1">
                                    <strong class="me-2">Rarity:</strong>
                                    <span class="badge rounded-pill bg-secondary">@SelectedPokemon.TotalRarity</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>




            <h5 class="text-center mb-4">Select a user to trade with:</h5>
            <input type="text" class="form-control mb-3" placeholder="Search users..." @bind="SearchQuery"
                @bind:event="oninput" />

            <div class="row">
                @if (FilteredUserList.Any())
                {
                    @foreach (var user in FilteredUserList)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                            <div class="card h-100 user" style="cursor: pointer;" @onclick="() => SelectUser(user)">
                                <div class="card-body text-center">
                                    <h5 class="card-title">@user.Username</h5>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-center text-muted">No users found.</p>
                }
            </div>
        </div>
    }
    else if (TradeWasSuccessful)
    {
        <div class="text-center">
            <h4>You successfuly traded Pokémon @SelectedPokemon.PokemonName with user @SelectedUser.Username</h4>

            <button class="btn btn-success mt-3" @onclick="() => RefreshPage()">Next Trade</button>
        </div>;
    }
    else
    {
        <div class="text-center">
            <h4>You selected Pokémon: @SelectedPokemon.PokemonName</h4>
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-3 mx-auto">
                <div class="card h-100 @(@SelectedPokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                    data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="cursor: pointer; 
               background:@(RarityColorFunctions.GetBackgroundGradient(@SelectedPokemon.TotalRarity)); 
               border: 2px solid @(RarityColorFunctions.GetRarityHSLA(@SelectedPokemon.TotalRarity)); 
               font-size: 0.85rem; 
               width: 90%; 
               max-width: 200px; 
               aspect-ratio: 3 / 4; 
               margin: auto; 
               display: flex; 
               flex-direction: column;">
                    <div class="wrapper"
                        style="flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">

                        <div class="wrapper-pokemon-img text-center"
                            style="height: 50%; display: flex; align-items: center; justify-content: center;">
                            <img src="@SelectedPokemon.FrontDefault" class="card-img-top"
                                style="max-width: 80%; max-height: 100%; object-fit: contain;" />
                        </div>
                        <div class="card-body p-2"
                            style="padding-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">
                            <h5 class="card-title text-center" style="font-size: 1rem; margin: 0;">
                                @SelectedPokemon.PokemonName</h5>

                            <ul class="list-group list-group-flush mt-2" style="padding: 0; margin: 0;">
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>HP:</strong> <span class="badge bg-success">@SelectedPokemon.BaseHP</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Attack:</strong> <span
                                        class="badge bg-danger">@SelectedPokemon.BaseAttack</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Defense:</strong> <span
                                        class="badge bg-warning">@SelectedPokemon.BaseDefense</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between p-1">
                                    <strong>Speed:</strong> <span class="badge bg-info">@SelectedPokemon.BaseSpeed</span>
                                </li>
                                <li class="list-group-item p-1">
                                    <strong>Type:</strong> <span
                                        class="text-uppercase text-muted">@SelectedPokemon.Type</span>
                                </li>
                                <li class="list-group-item p-1">
                                    <strong>Legendary:</strong>
                                    <span class="text-primary">@(SelectedPokemon.Legendary ? "Yes" : "No")</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-center align-items-center p-1">
                                    <strong class="me-2">Rarity:</strong>
                                    <span class="badge rounded-pill bg-secondary">@SelectedPokemon.TotalRarity</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <h5>Trading with: @SelectedUser.Username</h5>
            <button class="btn btn-success mt-3" @onclick="ConfirmTrade">Confirm Trade</button>
        </div>
    }
</div>


<style>
    .user {
        font-size: 16px;
        font-weight: bold;
        background: #ffffff;
        border: 2px solid #3a5fdc;
        border-radius: 8px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    }

    .user:hover {
        background-color: #1b6ec2;
        border-color: #2a4cb3;
        color: white;
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.3);
    }

    .user:active {
        transform: translateY(1px) scale(0.98);
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
    }
</style>

<script>
    function initializeVanillaTilt() {
        console.log("Initializing VanillaTilt...");

        const tiltElements = document.querySelectorAll("[data-tilt]");

        if (tiltElements.length > 0) {
            VanillaTilt.init(tiltElements, {
                max: 18,
                scale: 1.08,
            });
            console.log(`VanillaTilt initialized on ${tiltElements.length} elements.`);
        } else {
            console.warn("No elements with data-tilt attribute found.");
        }

        document.querySelectorAll(".card").forEach(card => {
            const glareColor = card.getAttribute("data-color");
            const glareInner = card.querySelector(".js-tilt-glare-inner");

            if (glareInner && glareColor) {
                glareInner.style.background = glareColor;
            }
        });
    }
</script>

@code {
    private List<Pokemon> PokemonList = new List<Pokemon>();
    private Pokemon SelectedPokemon;
    private UserInfo SelectedUser;

    private List<UserInfo> UserList = new();
    private string SearchQuery = string.Empty;

    private bool IsPokemonSelected = false;
    private bool IsUserSelected = false;
    private bool TradeWasSuccessful = false;

    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadPokemonsAsync();
        await LoadUsersAsync();
    }


    private async Task InitializeVanillaTiltAsync()
    {
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeVanillaTilt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing VanillaTilt: {ex.Message}");
        }
    }

    private async Task LoadPokemonsAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/inventory/getInventory");

            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "inventory-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            PokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
            InitializeVanillaTiltAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pokémon: {ex.Message}");
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "http://127.0.0.1:8085/findAllUserInfo");

            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "user-info-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            UserList = JsonSerializer.Deserialize<List<UserInfo>>(result) ?? new List<UserInfo>();
            Console.WriteLine("UserList:");
            foreach (var user in UserList)
            {
                Console.WriteLine(user);
                Console.WriteLine(user.Username);
                Console.WriteLine(user.Surname);
                Console.WriteLine(user.Name);
            }
            Console.WriteLine("UserList konec");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void RefreshPage(){
        Navigation.NavigateTo("/Trade", forceLoad: true);
    }

    private void SelectPokemon(Pokemon pokemon)
    {
        SelectedPokemon = pokemon;
        IsPokemonSelected = true;
        InitializeVanillaTiltAsync();
    }

    private void SelectUser(UserInfo user)
    {
        SelectedUser = user;
        IsUserSelected = true;
        InitializeVanillaTiltAsync();
    }

    private async Task ConfirmTrade()
    {
        Console.WriteLine($"Trading {SelectedPokemon.PokemonName} with {SelectedUser.Username}");
        try
        {
            // Sestavení URL s query parametry
            string url = $"/pokemon/trading/tradePokemon?inventory={SelectedPokemon?.Id}&user={SelectedUser?.Id}";


            // Vytvoření GET požadavku
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, url);

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "trading-api.pokedex-gamba.internal");


            // Poslání požadavku
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            Console.WriteLine(result);
            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"Trade failed: {response.StatusCode} {response.ReasonPhrase}");
            }
            else if (response.IsSuccessStatusCode)
            {
                TradeWasSuccessful = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private IEnumerable<UserInfo> FilteredUserList =>
    string.IsNullOrEmpty(SearchQuery)
    ? UserList
    : UserList.Where(u =>
    u.Username.Contains(SearchQuery) ||
    u.Name.Contains(SearchQuery) ||
    u.Surname.Contains(SearchQuery));

    private class UserInfo
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        [JsonPropertyName("username")]
        public string Username { get; set; } = string.Empty;

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("surname")]
        public string Surname { get; set; } = string.Empty;
    }

    private class TradeModel
    {
        [JsonPropertyName("inventory")]
        public string pokemonId { get; set; } = string.Empty;

        [JsonPropertyName("user")]
        public string userId { get; set; } = string.Empty;
    }
}
