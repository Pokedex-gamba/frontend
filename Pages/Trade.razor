@page "/Trade"

@inherits Auth

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using PokedexGambaApp.Shared
@using System.Text.Json.Serialization

<PageTitle>Trade</PageTitle>

<div class="container mt-5">
    <h3 class="text-center mb-4">Choose your Pokémon to trade</h3>

    @if (!IsPokemonSelected)
    {
        <div class="row">
            @foreach (Pokemon pokemon in PokemonList)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100" @onclick="() => SelectPokemon(pokemon)">
                        <img src="@pokemon.FrontDefault" class="card-img-top" />
                        <div class="card-body text-center">
                            <h5 class="card-title">@pokemon.PokemonName</h5>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!IsUserSelected)
    {
        <div class="container">
            <h4 class="text-center mb-4">You selected: @SelectedPokemon.PokemonName</h4>
            <img src="@SelectedPokemon.FrontDefault" alt="@SelectedPokemon.PokemonName" class="d-block mx-auto mb-4"
                style="width: 150px;" />

            <h5 class="text-center mb-4">Select a user to trade with:</h5>
            <input type="text" class="form-control mb-3" placeholder="Search users..." @bind="SearchQuery"
                @bind:event="oninput" />

            <div class="row">
                @if (FilteredUserList.Any())
                {
                    @foreach (var user in FilteredUserList)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                            <div class="card h-100" @onclick="() => SelectUser(user)">
                                <div class="card-body text-center">
                                    <h5 class="card-title">@user.Username</h5>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-center text-muted">No users found.</p>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <h4>You selected Pokémon: @SelectedPokemon.PokemonName</h4>
            <h5>Trading with: @SelectedUser.Username</h5>
            <button class="btn btn-success mt-3" @onclick="ConfirmTrade">Confirm Trade</button>
        </div>
    }
</div>

@code {
    private List<Pokemon> PokemonList = new List<Pokemon>();
    private Pokemon SelectedPokemon;
    private UserInfo SelectedUser;

    private List<UserInfo> UserList = new();
    private string SearchQuery = string.Empty;

    private bool IsPokemonSelected = false;
    private bool IsUserSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadPokemonsAsync();
        await LoadUsersAsync();
    }

    private async Task LoadPokemonsAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/inventory/getInventory");

            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "inventory-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            PokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pokémon: {ex.Message}");
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "http://127.0.0.1:8085/findAllUserInfo");

            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "user-info-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            UserList = JsonSerializer.Deserialize<List<UserInfo>>(result) ?? new List<UserInfo>();
            Console.WriteLine("UserList:");
            foreach (var user in UserList)
            {
                Console.WriteLine(user);
                Console.WriteLine(user.Username);
                Console.WriteLine(user.Surname);
                Console.WriteLine(user.Name);
            }
            Console.WriteLine("UserList konec");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void SelectPokemon(Pokemon pokemon)
    {
        SelectedPokemon = pokemon;
        IsPokemonSelected = true;
    }

    private void SelectUser(UserInfo user)
    {
        SelectedUser = user;
        IsUserSelected = true;
    }

    private async Task ConfirmTrade()
    {
        Console.WriteLine($"Trading {SelectedPokemon.PokemonName} with {SelectedUser.Username}");
        try
        {
            //TradeModel tradeModel = new TradeModel { pokemonId = SelectedPokemon?.Id, userId = SelectedUser?.Id };
            // Vytvoření požadavku s JSON obsahem
            //var requestData = JsonContent.Create(tradeModel);

            // Vytvoř požadavek
            //var request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/trading/tradePokemon​")
            // {
            // Content = requestData
            // };

            // Sestavení URL s query parametry
            string url = $"/pokemon/trading/tradePokemon?inventory={SelectedPokemon?.Id}&user={SelectedUser?.Id}";


            // Vytvoření GET požadavku
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, url);

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "trading-api.pokedex-gamba.internal");


            // Poslání požadavku
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            Console.WriteLine(result);
            if (!response.IsSuccessStatusCode)
            {

                throw new HttpRequestException($"Trade failed: {response.StatusCode} {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private IEnumerable<UserInfo> FilteredUserList =>
    string.IsNullOrEmpty(SearchQuery)
    ? UserList
    : UserList.Where(u =>
    u.Username.Contains(SearchQuery) ||
    u.Name.Contains(SearchQuery) ||
    u.Surname.Contains(SearchQuery));

    private class UserInfo
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        [JsonPropertyName("username")]
        public string Username { get; set; } = string.Empty;

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("surname")]
        public string Surname { get; set; } = string.Empty;
    }

    private class TradeModel
    {
        [JsonPropertyName("inventory")]
        public string pokemonId { get; set; } = string.Empty;

        [JsonPropertyName("user")]
        public string userId { get; set; } = string.Empty;
    }
}
