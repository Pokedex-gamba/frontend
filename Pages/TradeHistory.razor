@page "/TradeHistory"

@inherits Auth

@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization
@using PokedexGambaApp.Shared

<h1 class="text-center mb-4 fw-bold text-primary">Trade History</h1>

<div class="container mt-5">
    @if (TradeHistoryList.Count == 0)
    {
        <p class="text-center">No trades available.</p>
    }
    else
    {
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>Trade ID</th>
                    <th>Date</th>
                    <th>From User</th>
                    <th>To User</th>
                    <th>Pokemon</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in TradeHistoryList)
                {
                    var fromUser = UserList.FirstOrDefault(u => u.Id == trade.UserId)?.Username ?? "Unknown";
                    var toUser = UserList.FirstOrDefault(u => u.Id == trade.NewUserId)?.Username ?? "Unknown";
                    <tr>
                        <td>@trade.Id</td>
                        <td>@trade.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@fromUser</td>
                        <td>@toUser</td>
                        <td>

                            @foreach (var pokemon in PokemonList)
                            {
                                if (pokemon.Id == trade.InventoryId)
                                {
            
                                    
                                    <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 @(pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                        data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="
                        background:@(RarityColorFunctions.GetBackgroundGradient(pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity));
                                                            "
                        data-color="@(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity))">
                        <div class="wrapper">

                            <div class="wrapper-pokemon-img">
                                <img src="@pokemon.FrontDefault" class="card-img-top" />
                            </div>
                            <div class="card-body p-3">
                                <h5 class="card-title text-center">@pokemon.PokemonName</h5>

                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>HP:</strong> <span class="badge bg-success">@pokemon.BaseHP</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Attack:</strong> <span class="badge bg-danger">@pokemon.BaseAttack</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Defense:</strong> <span class="badge bg-warning">@pokemon.BaseDefense</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Speed:</strong> <span class="badge bg-info">@pokemon.BaseSpeed</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Type:</strong> <span class="text-uppercase text-muted">@pokemon.Type</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Legendary:</strong>
                                        <span class="text-primary">@(pokemon.Legendary ? "Yes" : "No")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-center align-items-center">
                                        <strong class="me-2">Rarity:</strong>
                                        <span class="badge rounded-pill bg-secondary">@pokemon.TotalRarity</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>



                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<style>
    /* Obecné nastavení tlačítek */
    button {
        font-size: 1rem;
        font-weight: 600;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    /* Animace hover */
    button:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    /* Barvy podle kategorií */
    .rarity-sort {
        background-color: #c77dff;
        /* Fialová */
        color: white;
    }

    .rarity-sort:hover {
        background-color: #b368f8;
    }

    .name-sort {
        background-color: #6c757d;
        /* Šedá */
        color: white;
    }

    .name-sort:hover {
        background-color: #5a6268;
    }

    .hp-sort {
        background-color: #198754;
        /* Zelená */
        color: white;
    }

    .hp-sort:hover {
        background-color: #157347;
    }

    .attack-sort {
        background-color: #dc3545;
        /* Červená */
        color: white;
    }

    .attack-sort:hover {
        background-color: #bb2d3b;
    }

    .defense-sort {
        background-color: #ffc107;
        /* Žlutá */
        color: black;
    }

    .defense-sort:hover {
        background-color: #e0a800;
    }

    .speed-sort {
        background-color: #0dcaf0;
        /* Světle modrá */
        color: white;
    }

    .speed-sort:hover {
        background-color: #0bb5d6;
    }
</style>


@code {
    private List<UserInfo> UserList = new();
    private List<TradeHistoryModel> TradeHistoryList = new();

    private List<Pokemon> PokemonList = new List<Pokemon>();


    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadUsersAsync();
        await LoadTradeHistoryAsync();


    }

    private async Task LoadUsersAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/findAllUserInfo");
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "user-info-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            UserList = JsonSerializer.Deserialize<List<UserInfo>>(result) ?? new List<UserInfo>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task LoadTradeHistoryAsync()
    {
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/trading/tradeHistory");
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "trading-api.pokedex-gamba.internal");

            HttpResponseMessage response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            TradeHistoryList = JsonSerializer.Deserialize<List<TradeHistoryModel>>(result) ?? new List<TradeHistoryModel>();

            // Načtení pokémonů pro každý záznam
            foreach (var trade in TradeHistoryList)
            {
                await LoadPokemonsAsync(trade.NewUserId);
            }
            PokemonList = PokemonList.GroupBy(pokemon => pokemon.Id)
                         .Select(group => group.First())
                         .ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trade history: {ex.Message}");
        }
    }

    private async Task LoadPokemonsAsync(string userID)
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get,
            $"/pokemon/inventory/getUserInventory?userId={userID}");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "inventory-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();
            List<Pokemon> localPokemonList = new List<Pokemon>();
            localPokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
            foreach (var pokemon in localPokemonList)
            {
                PokemonList.Add(pokemon);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    public class TradeHistoryModel
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        [JsonPropertyName("userId")]
        public string UserId { get; set; } = string.Empty;

        [JsonPropertyName("newUserId")]
        public string NewUserId { get; set; } = string.Empty;

        [JsonPropertyName("inventoryId")]
        public string InventoryId { get; set; } = string.Empty;

        public PokemonModel? Pokemon { get; set; }
    }

    public class PokemonModel
    {
        public string Name { get; set; } = string.Empty;
        public string SpriteUrl { get; set; } = string.Empty; // URL obrázku pokémona
    }

}
