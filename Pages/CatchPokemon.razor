@page "/CatchPokemon"

@inherits Auth

@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using PokedexGambaApp.Shared

<PageTitle>Fetch Pokemon</PageTitle>

<div class="container mt-5">
<div class="energy-container">
    <h3 class="energy-title">Your Energy</h3>
    <h3 class="energy-balance bi bi-lightning-charge-fill">@UserBalance.BalanceInt</h3>

    <div class="energy-actions">
        <button class="get-energy bi bi-plus-circle-fill" @onclick="NavigateToGetEnergy" style="background-color: #d8b867; font-size: small;"> Get More!</button>
        <button @onclick="FetchRandomPokemon">Catch Random Pokémon!</button>
        <h6 class="energy-note">Spend 25 energy</h6>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void NavigateToGetEnergy()
    {
        NavigationManager.NavigateTo("/GetEnergy");
    }
}

    @if (Pokemon != null)
    {
        <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4 mx-auto">
            <div class="card h-100 @(Pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="
                        background:@(RarityColorFunctions.GetBackgroundGradient(Pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(Pokemon.TotalRarity));
                                                    "
                data-color="@(RarityColorFunctions.GetRarityHSLA(Pokemon.TotalRarity))">
                <div class="wrapper">

                    <div class="wrapper-pokemon-img">
                        <img src="@Pokemon.FrontDefault" class="card-img-top" />
                    </div>
                    <div class="card-body p-3">
                        <h5 class="card-title text-center">@Pokemon.PokemonName</h5>

                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>HP:</strong> <span class="badge bg-success">@Pokemon.BaseHP</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Attack:</strong> <span class="badge bg-danger">@Pokemon.BaseAttack</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Defense:</strong> <span class="badge bg-warning">@Pokemon.BaseDefense</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Speed:</strong> <span class="badge bg-info">@Pokemon.BaseSpeed</span>
                            </li>
                            <li class="list-group-item">
                                <strong>Type:</strong> <span class="text-uppercase text-muted">@Pokemon.Type</span>
                            </li>
                            <li class="list-group-item">
                                <strong>Legendary:</strong>
                                <span class="text-primary">@(Pokemon.Legendary ? "Yes" : "No")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-center align-items-center">
                                <strong class="me-2">Rarity:</strong>
                                <span class="badge rounded-pill bg-secondary">@Pokemon.TotalRarity</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }

    <h3 class="text-center mb-4">Your previous catches:</h3>
    <div class="container">
        <div class="row">

            @foreach (Pokemon pokemon in PokemonList)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 @(pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                        data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="
                        background:@(RarityColorFunctions.GetBackgroundGradient(pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity));
                                " data-color="@(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity))">
                        <div class="wrapper">

                            <div class="wrapper-pokemon-img">
                                <img src="@pokemon.FrontDefault" class="card-img-top" />
                            </div>
                            <div class="card-body p-3">
                                <h5 class="card-title text-center">@pokemon.PokemonName</h5>

                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>HP:</strong> <span class="badge bg-success">@pokemon.BaseHP</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Attack:</strong> <span class="badge bg-danger">@pokemon.BaseAttack</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Defense:</strong> <span class="badge bg-warning">@pokemon.BaseDefense</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <strong>Speed:</strong> <span class="badge bg-info">@pokemon.BaseSpeed</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Type:</strong> <span class="text-uppercase text-muted">@pokemon.Type</span>
                                    </li>
                                    <li class="list-group-item">
                                        <strong>Legendary:</strong>
                                        <span class="text-primary">@(pokemon.Legendary ? "Yes" : "No")</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-center align-items-center">
                                        <strong class="me-2">Rarity:</strong>
                                        <span class="badge rounded-pill bg-secondary">@pokemon.TotalRarity</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>


</div>

<style>
    .energy-container {
        max-width: 500px;
        margin: 0 auto;
        background: linear-gradient(135deg, rgba(5, 39, 103, 0.8) 0%, rgba(58, 6, 71, 0.8) 70%);
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        text-align: center;
        color: #fff;
    }

    .energy-title {
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .energy-balance {
        font-size: 2.4rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #ffda79;
        text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.7);
    }

    .energy-actions {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .energy-actions button {
        padding: 10px 20px;
        font-size: 1.2rem;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: rgba(0, 255, 85, 0.8);
        color: #fff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .energy-actions button:hover {
        background-color: rgba(70, 20, 80, 0.9);
        transform: scale(1.05);
    }

    .energy-actions button:active {
        background-color: #ffda79;
        transform: scale(0.98);
    }

    .get-energy {
        padding: 8px 16px;
        font-size: 1rem;
        background-color: rgba(5, 39, 103, 0.8);
        color: white;
        border: none;
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .get-energy:hover {
        background-color: rgba(5, 50, 120, 0.9);
        transform: translateY(-2px);
    }

    .get-energy:active {
        background-color: rgba(5, 39, 103, 1);
        transform: translateY(2px);
    }

    .energy-note {
        font-size: 0.9rem;
        color: #e0e0e0;
    }
</style>


<script>
    function initializeVanillaTilt() {
        console.log("Initializing VanillaTilt...");

        const tiltElements = document.querySelectorAll("[data-tilt]");

        if (tiltElements.length > 0) {
            VanillaTilt.init(tiltElements, {
                max: 18,
                scale: 1.08,
            });
            console.log(`VanillaTilt initialized on ${tiltElements.length} elements.`);
        } else {
            console.warn("No elements with data-tilt attribute found.");
        }

        document.querySelectorAll(".card").forEach(card => {
            const glareColor = card.getAttribute("data-color");
            const glareInner = card.querySelector(".js-tilt-glare-inner");

            if (glareInner && glareColor) {
                glareInner.style.background = glareColor;
            }
        });
    }
</script>

@code {
    private List<Pokemon> PokemonList = new List<Pokemon>();
    private Pokemon? Pokemon;

    private Money UserBalance = new Money();

    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();

        await FindUserWallet();
        //await InitializeVanillaTiltAsync();
        await GetUserGambaAsync();
    }

    private async Task GetUserGambaAsync()
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/gamba/getUserGamba");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "gamba-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            PokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
            PokemonList = PokemonList.OrderByDescending(p => p.Date).ToList();
            InitializeVanillaTiltAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task FindUserWallet()
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/findUserWallet");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "money-manager-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            UserBalance = JsonSerializer.Deserialize<Money>(result);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    private async Task InitializeVanillaTiltAsync()
    {
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeVanillaTilt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing VanillaTilt: {ex.Message}");
        }
    }

    private async Task FetchRandomPokemon()
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/gamba/getRandomPokemon");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "gamba-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            Pokemon = JsonSerializer.Deserialize<Pokemon>(result);
            if (response.IsSuccessStatusCode)
            {
                UserBalance.BalanceInt -= 25;
                PokemonList.Insert(0, Pokemon);
                StateHasChanged();
            }


            InitializeVanillaTiltAsync();
        }
        catch (Exception ex)
        {
            Pokemon = null;
            Console.WriteLine(ex.Message);

        }
    }
}
