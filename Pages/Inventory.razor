@page "/Inventory"

@inherits Auth

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using PokedexGambaApp.Shared


<PageTitle>Inventory</PageTitle>

<div class="container mt-5">
    <div class="container">


        @if (!PokemonList.Any())
        {
            <div class=" text-center">
                <h3 class="text-center mb-4 fw-bold text-primary">Don't have any Pokémon yet?</h3>
                <a href="/CatchPokemon" class="btn btn-success mt-3 fw-bold px-4 py-3 shadow" style="font-size: 1.5rem; border-radius: 30px;">
    Go Catch Them Now!
</a>

            </div>
        }
        else
        {




            <h3 class="text-center mb-4 fw-bold text-primary">These are all yours!</h3>

            <div class="container">
                <div class="d-flex justify-content-center align-items-center gap-3 mb-4">
                    <span class="text-muted fs-5 d-flex align-items-center gap-1">
                        <i class="bi bi-funnel-fill text-primary"></i> Sort by:
                    </span>

                    <button class="btn d-flex align-items-center gap-2 rarity-sort"
                        @onclick="() => SortPokemonList(SortType.ByRarity)">
                        <i class="bi bi-stars"></i> Rarity
                    </button>

                    <button class="btn d-flex align-items-center gap-2 name-sort"
                        @onclick="() => SortPokemonList(SortType.ByName)">
                        <i class="bi bi-fonts"></i> Name
                    </button>

                    <button class="btn d-flex align-items-center gap-2 hp-sort"
                        @onclick="() => SortPokemonList(SortType.ByHP)">
                        <i class="bi bi-heart-pulse"></i> HP
                    </button>

                    <button class="btn d-flex align-items-center gap-2 attack-sort"
                        @onclick="() => SortPokemonList(SortType.ByAttack)">
                        <i class="bi bi-lightning-charge"></i> Attack
                    </button>

                    <button class="btn d-flex align-items-center gap-2 defense-sort"
                        @onclick="() => SortPokemonList(SortType.ByDefense)">
                        <i class="bi bi-shield-check"></i> Defense
                    </button>

                    <button class="btn d-flex align-items-center gap-2 speed-sort"
                        @onclick="() => SortPokemonList(SortType.BySpeed)">
                        <i class="bi bi-speedometer2"></i> Speed
                    </button>
                </div>
            </div>




            <div class="row">

                @foreach (Pokemon pokemon in PokemonList)
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100 @(pokemon.Legendary ? "legendary" : "")" data-tilt data-tilt-glare
                            data-tilt-max-glare="0.25" data-tilt-perspective="1000" style="
                        background:@(RarityColorFunctions.GetBackgroundGradient(pokemon.TotalRarity));
                        border: 2px outset @(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity));
                                                                                "
                            data-color="@(RarityColorFunctions.GetRarityHSLA(pokemon.TotalRarity))">
                            <div class="wrapper">

                                <div class="wrapper-pokemon-img">
                                    <img src="@pokemon.FrontDefault" class="card-img-top" />
                                </div>
                                <div class="card-body p-3">
                                    <h5 class="card-title text-center">@pokemon.PokemonName</h5>

                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item d-flex justify-content-between">
                                            <strong>HP:</strong> <span class="badge bg-success">@pokemon.BaseHP</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <strong>Attack:</strong> <span class="badge bg-danger">@pokemon.BaseAttack</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <strong>Defense:</strong> <span class="badge bg-warning">@pokemon.BaseDefense</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <strong>Speed:</strong> <span class="badge bg-info">@pokemon.BaseSpeed</span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Type:</strong> <span class="text-uppercase text-muted">@pokemon.Type</span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Legendary:</strong>
                                            <span class="text-primary">@(pokemon.Legendary ? "Yes" : "No")</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-center align-items-center">
                                            <strong class="me-2">Rarity:</strong>
                                            <span class="badge rounded-pill bg-secondary">@pokemon.TotalRarity</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<script>
    function initializeVanillaTilt() {
        console.log("Initializing VanillaTilt...");

        const tiltElements = document.querySelectorAll("[data-tilt]");

        if (tiltElements.length > 0) {
            VanillaTilt.init(tiltElements, {
                max: 18,
                scale: 1.08,
            });
            console.log(`VanillaTilt initialized on ${tiltElements.length} elements.`);
        } else {
            console.warn("No elements with data-tilt attribute found.");
        }

        document.querySelectorAll(".card").forEach(card => {
            const glareColor = card.getAttribute("data-color");
            const glareInner = card.querySelector(".js-tilt-glare-inner");

            if (glareInner && glareColor) {
                glareInner.style.background = glareColor;
            }
        });
    }
</script>

<style>
    /* Obecné nastavení tlačítek */
    button {
        font-size: 1rem;
        font-weight: 600;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    /* Animace hover */
    button:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    /* Barvy podle kategorií */
    .rarity-sort {
        background-color: #c77dff;
        /* Fialová */
        color: white;
    }

    .rarity-sort:hover {
        background-color: #b368f8;
    }

    .name-sort {
        background-color: #6c757d;
        /* Šedá */
        color: white;
    }

    .name-sort:hover {
        background-color: #5a6268;
    }

    .hp-sort {
        background-color: #198754;
        /* Zelená */
        color: white;
    }

    .hp-sort:hover {
        background-color: #157347;
    }

    .attack-sort {
        background-color: #dc3545;
        /* Červená */
        color: white;
    }

    .attack-sort:hover {
        background-color: #bb2d3b;
    }

    .defense-sort {
        background-color: #ffc107;
        /* Žlutá */
        color: black;
    }

    .defense-sort:hover {
        background-color: #e0a800;
    }

    .speed-sort {
        background-color: #0dcaf0;
        /* Světle modrá */
        color: white;
    }

    .speed-sort:hover {
        background-color: #0bb5d6;
    }
</style>

@code {
    private List<Pokemon> PokemonList = new List<Pokemon>();

    private enum SortType
    {
        ByRarity,
        ByName,
        ByHP,
        ByAttack,
        ByDefense,
        BySpeed
    }

    private void SortPokemonList(SortType sortType)
    {
        switch (sortType)
        {
            case SortType.ByRarity:
                PokemonList = PokemonList.OrderByDescending(p => p.TotalRarity).ToList();
                break;
            case SortType.ByName:
                PokemonList = PokemonList.OrderBy(p => p.PokemonName).ToList();
                break;
            case SortType.ByHP:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseHP).ToList();
                break;
            case SortType.ByAttack:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseAttack).ToList();
                break;
            case SortType.ByDefense:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseDefense).ToList();
                break;
            case SortType.BySpeed:
                PokemonList = PokemonList.OrderByDescending(p => p.BaseSpeed).ToList();
                break;
        }
        StateHasChanged();
        InitializeVanillaTiltAsync();
    }



    protected override async Task OnInitializedAsync()
    {
        await EnsureUserIsAuthenticatedAsync();
        await LoadPokemonsAsync();
    }

    private async Task InitializeVanillaTiltAsync()
    {
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeVanillaTilt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing VanillaTilt: {ex.Message}");
        }
    }

    private async Task LoadPokemonsAsync()
    {
        try
        {
            // Vytvoř požadavek
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "/pokemon/inventory/getInventory");

            // Zavolání JS funkce pro načtení tokenu ze sessionStorage
            string token = await JSRuntime.InvokeAsync<string>("storage.getFromSessionStorage", "token");

            // Nastav vlastní hlavičky
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            request.Headers.Add("X-Host", "inventory-api.pokedex-gamba.internal");

            // Pošli požadavek
            HttpResponseMessage response = await Http.SendAsync(request);
            string result = await response.Content.ReadAsStringAsync();

            PokemonList = JsonSerializer.Deserialize<List<Pokemon>>(result);
            InitializeVanillaTiltAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
